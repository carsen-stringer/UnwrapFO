function hyp = GradDescAll(dat,hyp)

f0            = dat.f0;
nF            = size(f0,2);
u             = dat.u;
s             = dat.s;
M             = dat.M;

mm            = 0.1;
gradThet      = zeros(nF,1);
gradSeps      = zeros(nF,1);

if hyp.isGPU
    hyp.seps = gpuArray(hyp.seps);
    hyp.thet = gpuArray(hyp.thet);
end

for k = 1:hyp.nopt
    logp          = marglikelihood(hyp.seps,hyp.thet,M,u,s,f0);
    [gradS,gradT] = gradlogp(dat,hyp);

    % move by gradient and see if marginal improves
    if hyp.thetscale==1
        gradThet  = gradT*mm + gradThet*(1-mm);
        thetg     = hyp.thet + gradThet*hyp.alpha;
    else
        thetg     = hyp.thet;
    end
    if hyp.sepscale==1
        gradSeps  = gradS*mm + gradSeps*(1-mm);
        sepsg     = max(0,hyp.seps + gradSeps*hyp.alpha);
    else      
        sepsg     = hyps.seps;
    end
    % compute marginal
    logpg         = marglikelihood(sepsg,thetg,M,u,s,f0);
    
    % stop gradients if not descending
    ginc = 0;
    for j = 1:nF
        if logpg(j) > logp(j)
            logp(j)  = logpg(j);
            hyp.seps(j) = sepsg(j);
            hyp.thet(j) = thetg(j);
            ginc  = ginc+1;
        end
    end
    if ginc == 0
        break;
    end
end

if hyp.isGPU
    hyp.seps = gather(hyp.seps);
    hyp.thet = gather(hyp.thet);
end
    

